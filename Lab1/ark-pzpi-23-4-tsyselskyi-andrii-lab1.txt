Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії


Звіт
з лабораторної роботи № 1
з дисципліни «Аналіз та рефакторинг коду»
на тему «Розробка Vision & Scope»




    Виконав:                                                                           Перевірив:
ст. гр. ПЗПІ-23-4                                                              ст. викладач кафедри ПІ
Цисельський Андрій                                            	         Сокорчук Ігор Петрович



Харків 2025
1 ІСТОРІЯ ЗМІН

№ДатаВерсія звітуОпис змін та виправлень120.10.20250.1Зроблено звіт
2 ЗАВДАННЯ
     Метою цієї роботи є набуття практичних навичок у створенні проєктної документації, зокрема у форматі Vision & Scope. У межах роботи передбачається навчитися формулювати опис проєкту, визначати його проблематику, мету, призначення, бізнес-логіку та основні функціональні компоненти. Крім того, необхідно опанувати використання інструментів для зберігання та спільної роботи з кодом, таких як GitHub.
3 ОПИС ВИКОНАНОЇ РОБОТИ
     Темою проєкту для виконання лабораторних робіт є програмна система для зберігання та видачі пігулок у медичних закладах. Детальний опис проєкту, підготовлений у форматі Vision & Scope, наведено в додатку Б. 

















4 ВИСНОВКИ
     У результаті виконання роботи було засвоєно основні принципи створення проєктної документації у форматі Vision & Scope, а також отримано практичні навички з опису ключових аспектів програмного проєкту — його мети, призначення, проблематики, бізнес-логіки та функціональних компонентів. Додатково було набуте розуміння важливості використання сучасних інструментів для зберігання та спільної розробки програмного забезпечення, зокрема GitHub, що сприяє ефективній командній роботі та організації процесу розробки.














5 ВИКОРИСТАНІ ДЖЕРЕЛА
1. Методичні вказівки до лабораторних робіт з дисципліни «Аналіз та рефакторинг коду програмного забезпечення» (дата звернення: 23.10.2025).
2. Сокорчук І. П. Настанови щодо розробки документу VISION & SCOPE (дата звернення: 23.10.2025).
















ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/E238RBBEwdQ
Хронологічний опис відеозапису:
00:00 – Вступ 
00:13 – Аналіз проблеми 
01:58 – Аналіз аналогів 
03:08 – Опис призначення системи 
04:20 – Опис бізнес-логіки 
06:34 – Опис функціональності серверної частини та IoT-клієнта 
09:21 – Опис функціональності веб-клієнта та мобільного клієнта 
10:55 – Опис програмних засобів та інструментів











ДОДАТОК Б
VISION AND SCOPE DOCUMENT (КОНЦЕПЦІЯ ТА РАМКИ ПРОЄКТУ)
1 BUSINESS REQUIREMENTS (БІЗНЕС-ВИМОГИ)
1.1 Аналіз проблеми
     У медичних закладах процес зберігання та видачі лікарських засобів часто виконується вручну або із залученням застарілих інформаційних систем. Це призводить до низки проблем, що впливають на безпеку пацієнтів, ефективність роботи персоналу та контроль за використанням медикаментів. Саме тому важливо впровадити автоматизовану систему управління обліком та видачею пігулок. Основні проблеми:
1) Людський фактор при видачі ліків.
Медичний персонал може помилково видати неправильний препарат, дозу або час прийому. Відсутність автоматизованої перевірки збільшує ризик медичних помилок, що може впливати на здоров’я пацієнтів.
2) Неефективний облік залишків.
Облік медикаментів часто ведеться вручну або у звичайних таблицях, що ускладнює контроль запасів. Через це персонал може не знати про нестачу певних препаратів або, навпаки, про їх надлишок, що веде до перевитрат або прострочення терміну придатності.
3) Відсутність автоматизації процесу видачі.
Процес видачі пігулок вимагає участі людини на кожному етапі — від перевірки рецепта до фізичного відкриття контейнера. Це створює навантаження на персонал, особливо у великих лікарнях, та знижує швидкість обслуговування.
4) Відсутність інтеграції з обладнанням.
Більшість медичних установ не мають IoT-рішень, які могли б автоматично видавати препарат відповідно до електронного рецепта. Через це персонал витрачає більше часу на рутинні дії, а процес контролю стає складнішим.
     Отже, створення системи, яка дозволяє автоматично контролювати запаси, реєструвати операції видачі, забезпечувати точність дозування та інтегруватися з IoT-пристроями для фізичної видачі пігулок, допоможе підвищити ефективність роботи медичних закладів, зменшити ризик помилок та оптимізувати управління медикаментами.
1.2 Аналіз аналогів
	На ринку існують окремі рішення для обліку медикаментів та автоматизації аптечного бізнесу, такі як Pyxis MedStation, Omnicell, MedEye.
1) Pyxis MedStation — автоматизована система зберігання лікарських засобів, яка має розширені функції безпеки, але вимагає складного налаштування та значних фінансових витрат, що робить її недоступною для невеликих медичних установ.
2) Omnicell — система з високим рівнем автоматизації, проте орієнтована переважно на великі лікарні, з централізованими фармацевтичними складами, і не підтримує відкриту інтеграцію з локальними ІТ-рішеннями.
3) MedEye — система, що перевіряє правильність медикаментів перед видачею, але не виконує фізичну видачу і не має вбудованої інтеграції з IoT-пристроями для механічного розподілу пігулок.
		На відміну від існуючих систем, розроблювана програмна система зберігання та видачі пігулок забезпечить:
1) повну інтеграцію бекенду з IoT-модулем,
2) автоматичну видачу ліків відповідно до електронних рецептів,
3) облік усіх операцій у базі даних у реальному часі,
4) зручний веб-інтерфейс для медперсоналу,
5) можливість масштабування та адаптації під різні типи медичних установ.


2 VISION OF THE SOLUTION (КОНЦЕПЦІЯ РІШЕННЯ)
2.1 Опис призначення системи
     Програмна система зберігання та видачі пігулок у медичних закладах призначена для автоматизації процесів обліку, контролю та фізичної видачі лікарських засобів. Система створена для використання медичним персоналом, фармацевтами, адміністраторами медзакладу та забезпечує надійний контроль за зберіганням і видачею медикаментів, зменшуючи ризик людських помилок і покращуючи ефективність роботи.
     Основні цілі системи:
1) забезпечення точності ідентифікації препаратів під час видачі;
2) автоматизація обліку запасів медикаментів на складах;
3) інтеграція з IoT-модулем для керування фізичними механізмами видачі пігулок;
4) централізоване зберігання даних у базі та керування через веб-інтерфейс;
5) забезпечення безпеки доступу та контроль дій користувачів відповідно до ролей.
     Завдяки системі медичний персонал зможе швидко й безпомилково видавати медикаменти відповідно до електронних призначень, а адміністрація — відслідковувати рух лікарських засобів, контролювати запаси, вести звітність і запобігати несанкціонованому доступу до препаратів.
2.2 Опис бізнес-логіки
	Система реалізує основні бізнес-процеси, пов’язані зі зберіганням, обліком та автоматизованою видачею пігулок. Вона забезпечує взаємодію між користувачами, сервером, базою даних та IoT-пристроєм, що фізично видає ліки.
	Дії, які можуть виконувати адміністратори:
1) реєстрація користувачів системи;
2) призначення ролей і прав доступу;
3) налаштування типів лікарських засобів і місць зберігання;
4) ведення довідників препаратів (назва, форма, партія, термін придатності);
5) отримання звітів про залишки, рух медикаментів і випадки видачі.
	Дії, які можуть виконувати медичні працівники:
1) перегляд призначень пацієнтів;
2) запит на видачу препарату через веб-інтерфейс;
3) підтвердження отримання пігулки через авторизацію або RFID-карту;
4) отримання повідомлень про успішну/помилкову видачу;
5) звітність про фактичне використання медикаментів.
	Бізнес-процес зберігання медикаментів:
1) адміністратор або фармацевт додає нову партію препаратів у систему.
2) у базу заносяться дані: назва, кількість, термін придатності, місце зберігання.
3) система відстежує рівень запасів у реальному часі.
4) у разі наближення мінімального запасу надсилається сповіщення адміністратору.
	Бізнес-процес видачі пігулок:
1) лікар створює електронне призначення для пацієнта в системі.
2) медсестра авторизується та обирає пацієнта.
3) система перевіряє відповідність призначення та наявність препарату.
4) через IoT-модуль відбувається видача пігулки.
5) система реєструє подію видачі у базі даних із зазначенням дати, часу, користувача та кількості.
	Бізнес-процес контролю залишків:
1) кожна операція видачі автоматично зменшує кількість медикаментів у базі;
2) при надходженні нової партії адміністратор додає її вручну або через імпорт;
3) система формує аналітичні звіти про використання препаратів за періодами;
4) відображається інформація про терміни придатності для уникнення втрат.
	Бізнес-процес аналітики та звітності:
1) формування звітів про рух медикаментів (надходження, видача, списання);
2) аналітика споживання препаратів по відділеннях або пацієнтах;
3) контроль ефективності використання запасів;
4) журнал дій користувачів для підвищення безпеки та відповідності стандартам.




















3 SCOPE AND LIMITATIONS (РАМКИ ТА ОБМЕЖЕННЯ ПРОЄКТУ)
3.1 Опис функціональності серверної частини та IoT-клієнта
	Серверна частина є центральним компонентом системи, який обробляє запити від користувачів, взаємодіє з базою даних, формує аналітичні звіти та координує роботу IoT-пристроїв (модулів видачі пігулок).
Основні функції серверної частини:
1) Управління користувачами:
a) реєстрація та авторизація медичного персоналу;
b) призначення ролей (адміністратор, фармацевт);
c) видача JWT-токенів для безпечних сесій;
d) контроль прав доступу до даних.
2) Управління медикаментами:
a) CRUD-операції з довідником препаратів (назва, форма, доза, термін придатності, місце зберігання);
b) облік партій препаратів і їх руху (надходження, списання, видача);
c) автоматичне зменшення запасів після кожної видачі;
d) повідомлення про закінчення терміну придатності або низький рівень запасів.
3) Управління призначеннями та видачею:
a) зберігання електронних призначень лікарів;
b) перевірка наявності препарату перед видачею;
c) реєстрація подій видачі (дата, час, користувач, пацієнт, препарат);
d) передача команд на IoT-модулі для фізичної видачі пігулок.
4) Аналітика та звітність:
a) формування статистичних звітів про використання препаратів;
b) аналіз споживання за періодами, відділеннями або пацієнтами;
c) журнал дій користувачів для контролю безпеки.
5) Інтеграція з IoT-пристроями:
a) отримання даних від IoT-клієнтів;
b) надсилання команд для видачі конкретної пігулки відповідно до електронного рецепта;
c) моніторинг виконання команд у реальному часі.
	IoT-клієнт — це вбудований пристрій, який виконує фізичні дії з видачі ліків за командами сервера. Він є проміжною ланкою між системою управління та механічним обладнанням.
	Основні функції IoT-клієнта:
	Сканування та ідентифікація
1) Зчитування штрих-коду або QR-коду препарату для підтвердження його відповідності електронному рецепту.
2) Ідентифікація фармацевта за RFID-карткою (або іншим методом доступу).
3) Перевірка відповідності ліків призначенню (правильний препарат, доза, час видачі).
4) Виявлення помилок або невідповідностей — наприклад, спроба видати препарат не тому користувачу або поза дозволеним часом.
5) Передача результатів сканування на сервер для журналювання та перевірки.
	Виконання команд сервера
1) Підтвердження або відхилення операції видачі відповідно до даних із бази (електронного рецепта).
2) Сигналізація про успішну або помилкову операцію (LED-індикатор, звуковий сигнал, повідомлення на дисплеї).
3) Передача статусу виконання (успішно, відхилено, помилка сканування) назад на сервер.
		Передача даних на сервер
1) Телеметрія роботи пристрою: передача даних про стан IoT-модуля (живлення, температура, доступність сканера, підключення до мережі).
2) Передача історії дій: кожна подія сканування, ідентифікації або видачі фіксується та синхронізується з центральною базою даних.
3) Сповіщення про технічні проблеми: інформування про потребу в обслуговуванні (наприклад, заміна сканера, помилка зчитування, проблеми з живленням).
3.2 Опис функціональності веб-клієнта та мобільного клієнта
	Веб-клієнт призначений для використання адміністраторами, фармацевтами та лікарями. Він надає інтерфейс для управління медикаментами, перегляду звітів, контролю запасів та моніторингу стану IoT-пристроїв.
	Основні функції веб-клієнта:
1) Управління користувачами: додавання, редагування, видалення користувачів; призначення ролей і прав доступу.
2) Управління медикаментами: додавання нових препаратів, редагування партій, встановлення мінімальних запасів.
3) Управління призначеннями: створення, перегляд і оновлення електронних призначень пацієнтів.
4) Моніторинг стану системи: перегляд інформації про кількість залишків, поточні видачі, сповіщення IoT-модулів.
5) Аналітика та звіти: формування звітів про використання ліків, витрати та статистику по відділеннях.
   	Веб-клієнт взаємодіє з сервером через REST API. Сервер обробляє запити, звертається до бази даних і, за необхідності, передає команди на IoT-клієнти.
	Мобільний клієнт призначений для використання фармацевтами.
	Основні функції мобільного клієнта:
1) авторизація користувача та доступ до призначень пацієнтів;
2) перегляд актуальних рецептів і стану видач;
3) ініціація процесу видачі пігулок (відправка запиту на сервер);
4) отримання підтвердження успішної видачі;
5) перегляд поточного стану IoT-пристрою (наявність препарату, статус контейнера).
	Мобільний клієнт підключається до серверу через API, отримує дані про призначення та надсилає запити на видачу. Сервер у відповідь формує команду для IoT-пристрою, а після виконання оновлює статус у базі даних.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     4 BUSINESS CONTEXT (БІЗНЕС-КОНТЕКСТ)
     4.3 Опис програмних засобів та інструментів
	Для реалізації програмної системи зберігання та видачі пігулок у медичних закладах буде використано сучасний технологічний стек, який забезпечить високу надійність, безпеку, масштабованість та зручну інтеграцію з IoT-пристроями.
	Серверна частина
1) Мова програмування: C#
2) Фреймворк: ASP.NET Core Використання ASP.NET Core дозволяє створювати потужний, безпечний і масштабований REST API, який забезпечить взаємодію між веб-клієнтом, мобільним застосунком, IoT-модулями та базою даних. API реалізовує основні бізнес-процеси — авторизацію користувачів, керування медикаментами, облік видач, аналітику та звітність.
3) Система керування базами даних: Microsoft SQL Server (MSSQL)
MSSQL забезпечує стабільне зберігання даних, підтримку транзакцій, цілісність інформації та можливість виконання складних аналітичних запитів.
4) Середовище розробки: Visual Studio 2022 Використовується як основне IDE для розробки серверної логіки, налаштування API, тестування та налагодження.
5) Контроль версій: Git
a) Репозиторій розміщено на GitHub для зручного доступу, відстеження історії змін і спільної роботи над кодом.
	Веб- та мобільні клієнти
1) Веб-клієнт:
a) Технології: HTML5, CSS3, JavaScript, React
b) Призначення: інтерфейс для адміністраторів, лікарів і фармацевтів для керування медикаментами, перегляду призначень, контролю запасів і звітності. 
c) Взаємодія із сервером здійснюється через REST API.
2)  Мобільний клієнт:
a) Розробка на базі React Native для кросплатформенності (Android/iOS).
b) Призначення: зручний доступ для медичного персоналу до списку призначень, підтвердження видачі ліків.
	Інтеграція з IoT-модулем
1) Апаратна платформа: Raspberry Pi 5 Використовується як базовий контролер для з’єднання зі сканером штрих-кодів, RFID-зчитувачем і допоміжними сенсорами.
2) Програмне забезпечення на IoT:
a) Мова: Python 3
b) Бібліотеки: paho-mqtt, RPi.GPIO, serial, requests
c) Призначення: обробка команд від сервера, виконання сканування препаратів і RFID-карт, відправка результатів на сервер.
3) Протокол взаємодії: MQTT Використовується як легкий і надійний протокол публікації/підписки для обміну даними між сервером та IoT-пристроями. Сервер надсилає команди для виконання операцій видачі або сканування, а IoT-клієнт публікує відповіді (успішно / помилка / відсутність препарату).
	Тестування та документація
1) Postman — для тестування REST API, перевірки запитів та сценаріїв взаємодії між сервером і клієнтами.
2) Swagger UI (OpenAPI) — для автоматичної генерації та візуалізації документації REST API.
	Середовище розгортання
1) ОС сервера: Windows Server.
2) Хмарна інфраструктура: Microsoft Azure — для хостингу бази даних, API.


2










