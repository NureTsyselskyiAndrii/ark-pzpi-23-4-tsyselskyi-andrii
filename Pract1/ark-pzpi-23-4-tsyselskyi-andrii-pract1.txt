Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії


Звіт
з практичної роботи № 1
з дисципліни «Аналіз та рефакторинг коду»
на тему «Правила оформлення програмного коду на VB.NET»




    Виконав:                                                                           Перевірив:
ст. гр. ПЗПІ-23-4                                                              ст. викладач кафедри ПІ
Цисельський Андрій                                            	         Сокорчук Ігор Петрович



Харків 2025
1 ІСТОРІЯ ЗМІН

№ДатаВерсія звітуОпис змін та виправлень120.10.20250.1Зроблено звіт
2 ЗАВДАННЯ
     Метою завдання ознайомлення з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчити аналізувати та рефакторити код для покращення його якості. Треба  обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.
3 ОПИС ВИКОНАНОЇ РОБОТИ
     У межах виконання роботи було обрано мову програмування Visual Basic для подальшого аналізу її особливостей і рекомендацій щодо написання якісного та чистого коду. Під час дослідження було опрацьовано основні стильові правила мови, принципи найменування змінних, функцій і класів, структуру коду, підходи до рефакторингу. На основі отриманих знань підготовлено приклади коду, що демонструють практичне застосування зазначених рекомендацій, зокрема щодо структурування, оформлення та підвищення якості програмного забезпечення.
Рекомендація 1: Використовуйте осмислені назви змінних та PascalCase
Опис: Назви змінних мають чітко відображати їх призначення. Не варто використовувати скорочення, незрозумілі абревіатури або надто довгі назви.
Приклад:
  5.         ' Добре
  6.         Dim CustomerName As String
  7.         Dim TotalPrice As Decimal
  8. 
  9.         ' Погано
  10.         Dim customer_name As String
  11.         Dim totalprice As Decimal
  12.         
  13.         ' Добре
14.         Dim HtmlDocument As String
15.         Dim UserURL As String
16. 
17.         ' Погано (занадто довго і змішано)
18.         Dim HypertextMarkupLanguageDocument As String
19.         Dim WebAddr As String

Пояснення: у Visual Basic прийнято використовувати стиль PascalCase для назв змінних. Осмислені назви роблять код зрозумілішим для інших розробників, спрощують налагодження та підтримку програми. Непослідовне форматування чи неочевидні назви ускладнюють читання й можуть призвести до помилок під час роботи з кодом.

Рекомендація 2: Уникайте конфлікту назв із зарезервованими словами 
Опис: Не слід називати змінні так само, як вбудовані об’єкти або типи, щоб уникнути конфліктів. 
Приклад:
27. ' Погано
28. Dim Date As String = "10/23/2025"
29. 
30. ' Добре
31. Dim currentDate As String = "10/23/2025"
32. Dim currentDateTime = DateTime.Date
33. MsgBox(currentDateTime.ToString()) 

Пояснення: Якщо змінна матиме ту саму назву, що й зарезервоване слово (наприклад, Date), компілятор може сплутати її з системною функцією. Це призведе до помилок і неочікуваної поведінки програми. Тому варто використовувати унікальні та змістовні назви, наприклад currentDate.
Рекомендація 3: Розділяйте інструкції по рядках
Опис: Кожен оператор має бути записаний в окремому рядку для кращої читабельності коду.
Приклад:
31. ' Погано
32. Dim a As Integer : Dim b As Integer
33. a = 5 : b = 10
34. If a < b Then Console.WriteLine("Smaller")
35. 
36. 
37. ' Добре
38. Dim a As Integer
39. Dim b As Integer
40. 
41. a = 5
42. b = 10
43. 
44. If a < b Then
45.     Console.WriteLine("Smaller")
46. End If

Пояснення: Поділ інструкцій на окремі рядки підвищує зрозумілість програми. При одночасному використанні декількох операторів на одному рядку код стає важким для сприйняття та налагодження. В Visual Basic важливо дотримуватись структурованості, щоб уникнути плутанини під час читання коду.
Рекомендація 4: Правильне оголошення масивів 
Опис: При створенні масивів використовуйте узгоджений стиль та уникайте зайвих дужок.
Приклад:
47. ' Погано
48. Dim letters2() As String = New String() {"a", "b", "c"}
49. 
50. ' Добре
51. Dim letters1 As String() = {"a", "b", "c"}
52. 
53. ' Погано
54. Dim letters3() As String = {"a", "b", "c"}
55. 
56. Dim letters6(2) As String
57. letters6(0) = "a"
58. letters6(1) = "b"
59. letters6(2) = "c"
60. 
61. ' Добре
62. Dim letters4 As String() = {"a", "b", "c"}
63. Dim letters5 As String() = {"a", "b", "c"}

Пояснення: Правильне оголошення масивів робить код коротшим і зрозумілішим. У Visual Basic можна використовувати спрощену форму ініціалізації без створення нового об’єкта через New. Це покращує читабельність і відповідає сучасним стандартам оформлення. Також рекомендується використовувати ініціалізацію в фігурних дужках для простих типів — це підвищує читабельність та зменшує кількість зайвого коду. Заповнення масиву вручну поелементно — застарілий стиль, який робить код громіздким і складним у підтримці.

Рекомендація 5: Форматуйте LINQ-запити для підвищення читабельності та зрозумілості
Опис: При написанні LINQ-запитів у Visual Basic важливо дотримуватися структурованого форматування — розділяти частини запиту (джерело, умови, вибірку) на окремі рядки та використовувати зрозумілі назви змінних. Це спрощує розуміння логіки запиту й робить код більш підтримуваним.
Приклад:
65. ' Погано
66. Dim q = From c In customers, o In orders
67.         Where c.CustomerID = o.CustomerID
68.         Select c.Name, o.ID
69. 
70. ' Добре
71. Dim customerOrders = From customer In customers
72.                      Join order In orders
73.                        On customer.CustomerID Equals order.CustomerID
74.                      Where customer.City = "Seattle"
75.                      Select CustomerName = customer.Name,
76.                             OrderID = order.ID

Пояснення: У першому прикладі код складно сприймати — змінні мають короткі й неінформативні назви (c, o), а відсутність відступів ускладнює розуміння структури запиту. У покращеному варіанті використано зрозумілі імена (customer, order) та відформатовану структуру запиту, що полегшує сприйняття логіки вибірки даних. Такий підхід відповідає принципам чистого коду в Visual Basic і допомагає уникнути плутанини при роботі з великими LINQ-запитами.
Рекомендація 6: Використовуйте зрозумілі імена методів
Опис: Назви методів повинні чітко описувати дію, яку вони виконують.
Приклад:
83. ' Погано
84. Sub Salary()
85.     ' ...
86. End Sub
87. 
88. ' Добре
89. Sub CalculateSalary()
90.     ' ...
91. End Sub

Пояснення: Ім’я методу має бути дієсловом, яке вказує на виконувану дію. Наприклад, CalculateSalary одразу дає зрозуміти, що метод обчислює зарплату. Неконкретні назви, як-от Salary, не передають функціоналу й можуть ввести в оману.
Рекомендація 7: Використовуйте правильні назви класів та інтерфейсів
Опис: Класи слід називати іменниками у формі однини, а інтерфейси мають починатися з літери I.
Приклад:
92. ' Погано
93. Public Class Employ
94.     Public Property EmployeeName As String
95. End Class
96. 
97. Public Interface Printable
98.     Sub PrintDocument()
99. End Interface
100. 
101. ' Добре
102. Public Class Employee
103.     Public Property EmployeeName As String
104. End Class
105. 
106. Public Interface IPrintable
107.     Sub PrintDocument()
108. End Interface

Пояснення: Правильне найменування класів і інтерфейсів допомагає швидко орієнтуватися в коді. Префікс I у назві інтерфейсу (IPrintable) є стандартом у Visual Basic і дозволяє одразу відрізнити інтерфейс від класу. Це підвищує зрозумілість структури проєкту.
Рекомендація 8: Іменування обробників подій
Опис: Обробники подій мають закінчуватись словом EventHandler, щоб відображати їх призначення.
Приклад:
112. ' Погано
113. Public Sub MouseClick(sender As Object, e As EventArgs)
114.     MsgBox("Mouse clicked!")
115. End Sub
116. 
117. ' Добре
118. Public Sub MouseClickEventHandler(sender As Object, e As EventArgs)
119.     MsgBox("Mouse clicked!")
120. End Sub

Пояснення: Таке найменування дозволяє легко зрозуміти, що метод є саме обробником події, а не звичайним методом. Це покращує читабельність і підтримку великих застосунків, де подій може бути багато.
Рекомендація 9: Назви класів аргументів подій
Опис: Якщо клас використовується для передачі даних у події, він має закінчуватись на EventArgs.
Приклад:
125. ' Погано
126. Public Class Order
127.     Inherits EventArgs
128.     Public Property OrderId As Integer
129. End Class
130. 
131. ' Добре
132. Public Class OrderEventArgs
133.     Inherits EventArgs
134.     Public Property OrderId As Integer
135. End Class

Пояснення: Суфікс EventArgs — це сталий стандарт .NET, що вказує на роль класу. Така узгодженість допомагає розробникам швидко розуміти призначення об’єкта без необхідності переглядати весь код.
Рекомендація 10: Уникайте скорочених конструкцій та записів в один рядок
Опис: Код має бути розділений на логічні блоки та відформатований для легкого читання.
Приклад:
138. ' Погано
139. Dim a As Integer, b As Integer, c As Integer
140. Sub Test() : Console.WriteLine("Hello") : End Sub
141. 
142. ' Добре
143. Dim a As Integer
144. Dim b As Integer
145. Dim c As Integer
146. 
147. Sub Test()
148.     Console.WriteLine("Hello")
149. End Sub
150. Property Name As String
151.     Get
152.         Return _name
153.     End Get
154.     Set(value As String)
155.         _name = value
156.     End Set
157. End Property

Пояснення: Коли інструкції записані в одному рядку, код стає нечитабельним. Поділ логічних блоків і дотримання відступів дозволяє швидко орієнтуватися у програмі та полегшує її супровід.
Рекомендація 11: Використовуйте коментарі лише для пояснення логіки
Опис: Коментарі мають пояснювати суть алгоритму, а не дублювати очевидні дії коду.
Приклад:
160. ' Погано
161. Dim x As Integer = 10 'variable for count
162. '************ Start of Function ************
163. Function Add(a As Integer, b As Integer) As Integer
164.     Return a + b 'adds numbers
165. End Function 'end
166. '************ End ************
167. 
168. ' Добре
169. ' Variable for counting.
170. Dim x As Integer = 10
171. 
172. ' Adds two numbers and returns the result.
173. Function Add(a As Integer, b As Integer) As Integer
174.     Return a + b
175. End Function
Пояснення: Коментарі мають бути короткими, чіткими й пояснювати чому реалізовано саме так, а не що робить код. Надлишок або шаблонні коментарі засмічують код і знижують його якість. У Visual Basic, як і в інших мовах .NET, коментарі мають бути лаконічними й інформативними.

















4 ВИСНОВКИ
     У результаті виконання роботи було поглиблено знання щодо принципів написання чистого, ефективного та підтримуваного коду на мові програмування Visual Basic. Проаналізовано основні рекомендації з організації коду, дотримання стильових стандартів, правильного найменування змінних і методів, а також методів рефакторингу для підвищення читабельності та зручності супроводу програм. На практичних прикладах продемонстровано, як застосування цих принципів сприяє створенню структурованого та зрозумілого програмного забезпечення. Отже, отримані результати підтвердили важливість дотримання правил чистого коду для підвищення якості, надійності та довговічності програмних продуктів, розроблених на Visual Basic.
5 ВИКОРИСТАНІ ДЖЕРЕЛА



















ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/9lPIu_M92fg
Хронологічний опис відеозапису:
00:00 - Вступ 
00:25 - Зміст 
00:37 - Про Visual Basic 
01:20 - Чому важливо дотримуватись правил 
02:06 - Правила іменування 
04:44 - Відступи та структура
05:46 - Правила коментування 
06:18 - Ініціалізація масивів 
07:05 - Правила оформлення запитів 
07:34 - Структура проекту 
08:14 - Висновки 
08:53 - Список використаних джерел







ДОДАТОК Б
Слайди презентації

Рисунок Б.1 - Титульний лист

Рисунок Б.2 - Зміст

Рисунок Б.3 – Про VB.NET


Рисунок Б.4 – Чому важливо дотримуватися правил оформлення коду


Рисунок Б.5 – Правила іменування


Рисунок Б.6 – Правила іменування



Рисунок Б.7 – Правила іменування


Рисунок Б.8 – Правила іменування


Рисунок Б.9 – Правила іменування


Рисунок Б.10 – Відступи та структура


Рисунок Б.11 – Відступи та структура


Рисунок Б.12 – Правила коментування


Рисунок Б.13 – Ініціалізація масивів


Рисунок Б.14 – Позначення типу та заповнення масиву


Рисунок Б.15 – Правила оформлення запитів


Рисунок Б.16 – Структура проекту


Рисунок Б.17 – Висновки


Рисунок Б.18 – Список використаних джерел

ДОДАТОК В
Програмний код
GitHub репозиторій: https://github.com/NureTsyselskyiAndrii/ark-pzpi-23-4-tsyselskyi-andrii/blob/main/Pract1/ark-pzpi-23-4-tsyselskyi-andrii-pract1/ark-pzpi-23-4-tsyselskyi-andrii-pract1-code.vb
1. Module Program
2.     Sub Main(args As String())
3. 
4.         ' Добре
5.         Dim CustomerName As String
6.         Dim TotalPrice As Decimal
7. 
8.         ' Погано
9.         Dim customer_name As String
10.         Dim totalprice As Decimal
11. 
12. 
13.         Dim HtmlDocument As String
14.         Dim UserURL As String
15. 
16.         ' Погано (занадто довго і змішано)
17.         Dim HypertextMarkupLanguageDocument As String
18.         Dim WebAddr As String
19. 
20.         ' Уникайння однакових імен 
21.         Dim Date As String = "10/23/2025"
22. 
23.         ' Правильний варіант
24.         Dim currentDate As String = "10/23/2025"
25. 
26.         ' Якщо треба звернутися до вбудованого Date:
27.         Dim currentDate = DateTime.Date
28.         MsgBox(currentDate.ToString())
29. 
30. 
31.         Dim a As Integer : Dim b As Integer
32.         a = 5 : b = 10
33.         If a < b Then Console.WriteLine("Smaller")
34. 
35. 
36.         ' Добре
37.         Dim a As Integer
38.         Dim b As Integer
39. 
40.         a = 5
41.         b = 10
42. 
43.         If a < b Then
44.             Console.WriteLine("Smaller")
45.         End If
46. 
47.         ' Погано
48.         Dim letters2() As String = New String() {"a", "b", "c"}
49. 
50.         ' Добре
51.         Dim letters1 As String() = {"a", "b", "c"}
52. 
53.         ' Погано
54.         Dim letters3() As String = {"a", "b", "c"}
55. 
56.         Dim letters6(2) As String
57.         letters6(0) = "a"
58.         letters6(1) = "b"
59.         letters6(2) = "c"
60. 
61.         ' Добре
62.         Dim letters4 As String() = {"a", "b", "c"}
63.         Dim letters5 As String() = {"a", "b", "c"}
64. 
65. 
66.         ' Погано
67.         Dim q = From c In customers, o In orders
68.                 Where c.CustomerID = o.CustomerID
69.                 Select c.Name, o.ID
70. 
71.         ' Добре
72.         Dim customerOrders = From customer In customers
73.                              Join order In orders
74.                                On customer.CustomerID Equals order.CustomerID
75.                              Where customer.City = "Seattle"
76.                              Select CustomerName = customer.Name,
77.                                     OrderID = order.ID
78.     End Sub
79. 
80. 
81. 
82.     ' Погано
83.     Sub Salary()
84.         ' ...
85.     End Sub
86. 
87.     ' Добре
88.     Sub CalculateSalary()
89.         ' ...
90.     End Sub
91. 
92.     ' Погано
93.     Public Class Employ
94.         Public Property EmployeeName As String
95.     End Class
96. 
97.     ' Добре
98.     Public Class Employee
99.         Public Property EmployeeName As String
100.     End Class
101. 
102.     ' Інтерфейс (Погано)
103.     Public Interface Printable
104.         Sub PrintDocument()
105.     End Interface
106. 
107.     ' Інтерфейс (Добре)
108.     Public Interface IPrintable
109.         Sub PrintDocument()
110.     End Interface
111. 
112.     ' Обробник події (Погано)
113.     Public Sub MouseClick(sender As Object, e As EventArgs)
114.         MsgBox("Mouse clicked!")
115.     End Sub
116. 
117. 
118.     ' Обробник події (Добре)
119.     Public Sub MouseClickEventHandler(sender As Object, e As EventArgs)
120.         MsgBox("Mouse clicked!")
121.     End Sub
122. 
123. 
124.     ' Клас аргументів події (Погано)
125.     Public Class Order
126.         Inherits EventArgs
127.         Public Property OrderId As Integer
128.     End Class
129. 
130.     ' Клас аргументів події (Добре)
131.     Public Class OrderEventArgs
132.         Inherits EventArgs
133.         Public Property OrderId As Integer
134.     End Class
135. 
136. 
137.     ' Погано
138.     Dim a As Integer, b As Integer, c As Integer
139.     Sub Test() : Console.WriteLine("Hello") : End Sub
140.     Property Name As String : Get : Return _name : End Get : Set(value As String) : _name = value : End Set : End Property
141. 
142.     ' Добре
143.     Dim a As Integer
144.     Dim b As Integer
145.     Dim c As Integer
146. 
147.     Sub Test()
148.         Console.WriteLine("Hello")
149.     End Sub
150. 
151.     Property Name As String
152.         Get
153.             Return _name
154.         End Get
155.         Set(value As String)
156.             _name = value
157.         End Set
158.     End Property
159. 
160.     ' Погано
161.     Dim x As Integer = 10 'variable for count
162.     '************ Start of Function ************
163.     Function Add(a As Integer, b As Integer) As Integer
164.         Return a + b 'adds numbers
165.     End Function 'end
166.     '************ End ************
167. 
168.     ' Добре
169.     ' Variable for counting.
170.     Dim x As Integer = 10
171. 
172.     ' Adds two numbers and returns the result.
173.     Function Add(a As Integer, b As Integer) As Integer
174.         Return a + b
175.     End Function
176. 
177. End Module


2










